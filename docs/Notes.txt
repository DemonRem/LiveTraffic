TEST DATA
===

Landing:
EDDL 0427/103300, a/c 3C66B2=3.958.450 (A320 DLH6JW) in on final approach, no flight data on the ground, tests artifical touch-down and roll-out
KLGA 0427/150100, a/c A4D65C=10.802.780 lands at 150100, lands, flight data late down the run-way, tests landing detection and touch-down insertion

Take off:
EDDF 0427/103100, a/c 4BA92F=4.958.511 takes off, first position is 500ft AGL

KLGA 0427/150600, a/c   AB2362=11.215.714 takes off
                        A4D65C=10.802.780 lands at 150100, lands, flight data late down the run-way, tests landing detection and touch-down insertion
                        AC7419=11.301.913 lands at 150200, last flight data way down the runway (descend too short for touch-down insertion)
    new
                        AB7617=11.236.887 lands at 150700, seems to have last off-gnd-fd before touch-down and next on-gnd-fd already on the taxi way after turning off the runway. Maybe also just bad merging...
                                                            verify if checking and retaining (un-merged)first on-gnd-pos makes sense
    take-off (?)
                        AB2362=11.215.714
                        ACF0DA=11.333.850 take off at 151800


much ground traffic     A4D65C=10.802.780 after landing
                        A32FA7=10.694.567
                        AA2BA5=11.152.293

MUST
===
Packaging: Verify that included frameworks are
- built with full optimizations
- stripped debug symbols
- are included as release versions


LATER
=====


DONE
====
Find Resource Files
- with relative paths
- also in XSquawkBox directories

Debug model selection by DataRef (LTMain.cpp/MPIntPrefsFunc)

writing livetraffic/dim/date
- can work with month/day only
- could switch to manually set time
- can activate use_historic
all in one go

If misconfigured could enable thousands of aircrafts...set an upper limit of 50

https://github.com/kuroneko/libxplanemp

DOCUMENTATION
===========
XP10 Mac workaround for TCAS display: Disable plugin (takes time as now the
built-in aircrafts are created), then reenable


Acceleration / Deceleration
----------------------------
Also see Deceleration.psd
Correct point to start decelaration tx
Distance travelled and start/target time are given as per flight data
Distance(area) = distance with const initial speed + distance with decelaration
Distance with decelaration has two parts:
1. The area (rectangular) "under" target speed
2. The area (triangular) between target and initial speed

distance traveled = d
initial speed = vi
target speed = vt
delta speed = ∆v = [vt-vi]          // negative in case of deceleration!
initial time = ti
target time = tt
delta time = ∆t = [tt-ti]
time to start deceleration = tx    <-- looking for this value

    d = vi * [tx-ti]  +  (vt * [tt-tx] + (-∆v) * [tt-tx] / 2)
      = vi * ∆t       -  (-∆v) * [tt-tx] / 2    // decel: from entire rectangle=distance remove the triangle not traveled due to deceleration in the top right corner
      = vi * ∆t       +  ∆v * [tt-tx] / 2       // accel: to the rectangle made up of the initial speed add the triangle traveled faster due to acceleration
⇔  d - vi * ∆t   =  ∆v/2 * tt  -  ∆v/2 * tx
⇔  d - vi * ∆t   -  ∆v/2 * tt  =  -∆v/2 * tx
⇔  -2/∆v * (d - vi * ∆t - ∆v/2 * tt)  =  tx
⇔   2/∆v * (-d + vi * ∆t + ∆v/2 * tt)  =  tx
⇔  tx =  2/∆v * (vi * ∆t + ∆v/2 * tt - d)


LIBRARIES
========
libz / zlib - https://zlib.net/zlib_license.html
CURL - https://curl.haxx.se/libcurl/
    Build using the provided script MacOSX-Framework
    Framework is built as libcurl.framework in libcurl's main folder
    To change the install name of libcurl before linkink with LiveTRaffic's mac.xpl:
    install_name_tool -id @loader_path/libcurl libcurl
    Include libcurl.framework as Linked Framework
    Install 'libcurl' along with mac.xpl into .../Resources/plugins/LiveTraffic/64
libpng - http://www.libpng.org/pub/png/libpng.html
xplanemp
X-Plane API
parson - https://github.com/kgabis/parson


DEBUGGER
=======
Summary Formats:
positionTy:     lat={$VAR.v.__begin_[0]} lon={$VAR.v.__begin_[1]} alt={$VAR.v.__begin_[2]}m ts={$VAR.v.__begin_[3]} head={$VAR.v.__begin_[4]}
iterator of positionTy:
                lat={$VAR.__ptr_.v.__begin_[0]} lon={$VAR.__ptr_.v.__begin_[1]} alt={$VAR.__ptr_.v.__begin_[2]}m ts={$VAR.__ptr_.v.__begin_[3]} head={$VAR.__ptr_.v.__begin_[4]}
MovingParam:    val={$VAR.val} [{$VAR.valFrom} -> {$VAR.valTo} @ {$VAR.timeTo}]
AccelParam:     {$VAR.currSpeed_m_s}m/s [{$VAR.startSpeed} -> {$VAR.targetSpeed} @ {$VAR.targetTime}]
VectorTy:       angle={$VAR.angle} dist={$VAR.dist} vsi={$VAR.vsi} speed={$VAR.speed}
LTAircraft:     icaoInt = {$VAR.fd.transpIcaoInt}, phase = {$VAR.phase}, {$VAR.speed}kt, {$VAR.vsi}ft/min
FDDynamicData:  head={$VAR.heading} spd={$VAR.spd} vsi={$VAR.vsi} ts={$VAR.ts}
cycleInfo:      simTime={$VAR.simTime}
